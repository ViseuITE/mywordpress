<?php //phpcs:ignore
/**
 * Theme functions and definitions.
 *
 * @package BlogHash
 * @author Peregrine Themes
 * @since   1.0.0
 */

/**
 * Main Bloghash class.
 *
 * @since 1.0.0
 */
final class Bloghash {

	/**
	 * Theme options
	 *
	 * @since 1.0.0
	 * @var object
	 */
	public $options;

	/**
	 * Theme fonts
	 *
	 * @since 1.0.0
	 * @var object
	 */
	public $fonts;

	/**
	 * Theme icons
	 *
	 * @since 1.0.0
	 * @var object
	 */
	public $icons;

	/**
	 * Theme customizer
	 *
	 * @since 1.0.0
	 * @var object
	 */
	public $customizer;

	/**
	 * Theme admin
	 *
	 * @since 1.0.0
	 * @var object
	 */
	public $admin;

	/**
	 * Singleton instance of the class.
	 *
	 * @since 1.0.0
	 * @var object
	 */
	private static $instance;
	/**
	 * Theme version.
	 *
	 * @since 1.0.0
	 * @var string
	 */
	public $version = '1.0.20';
	/**
	 * Main Bloghash Instance.
	 *
	 * Insures that only one instance of Bloghash exists in memory at any one
	 * time. Also prevents needing to define globals all over the place.
	 *
	 * @since 1.0.0
	 * @return Bloghash
	 */
	public static function instance() {
		if ( ! isset( self::$instance ) && ! ( self::$instance instanceof Bloghash ) ) {
			self::$instance = new Bloghash();
			self::$instance->constants();
			self::$instance->includes();
			self::$instance->objects();
			// Hook now that all of the Bloghash stuff is loaded.
			do_action( 'bloghash_loaded' );
		}
		return self::$instance;
	}

	/**
	 * Setup constants.
	 *
	 * @since 1.0.0
	 * @return void
	 */
	private function constants() {
		if ( ! defined( 'BLOGHASH_THEME_VERSION' ) ) {
			define( 'BLOGHASH_THEME_VERSION', $this->version );
		}
		if ( ! defined( 'BLOGHASH_THEME_URI' ) ) {
			define( 'BLOGHASH_THEME_URI', get_parent_theme_file_uri() );
		}
		if ( ! defined( 'BLOGHASH_THEME_PATH' ) ) {
			define( 'BLOGHASH_THEME_PATH', get_parent_theme_file_path() );
		}
	}
	/**
	 * Include files.
	 *
	 * @since  1.0.0
	 * @return void
	 */
	public function includes() {
		require_once BLOGHASH_THEME_PATH . '/inc/common.php';
		require_once BLOGHASH_THEME_PATH . '/inc/helpers.php';
		require_once BLOGHASH_THEME_PATH . '/inc/widgets.php';
		require_once BLOGHASH_THEME_PATH . '/inc/template-tags.php';
		require_once BLOGHASH_THEME_PATH . '/inc/template-parts.php';
		require_once BLOGHASH_THEME_PATH . '/inc/icon-functions.php';
		require_once BLOGHASH_THEME_PATH . '/inc/breadcrumbs.php';
		require_once BLOGHASH_THEME_PATH . '/inc/class-bloghash-dynamic-styles.php';
		// Core.
		require_once BLOGHASH_THEME_PATH . '/inc/core/class-bloghash-options.php';
		require_once BLOGHASH_THEME_PATH . '/inc/core/class-bloghash-enqueue-scripts.php';
		require_once BLOGHASH_THEME_PATH . '/inc/core/class-bloghash-fonts.php';
		require_once BLOGHASH_THEME_PATH . '/inc/core/class-bloghash-theme-setup.php';
		// Compatibility.
		require_once BLOGHASH_THEME_PATH . '/inc/compatibility/woocommerce/class-bloghash-woocommerce.php';
		require_once BLOGHASH_THEME_PATH . '/inc/compatibility/socialsnap/class-bloghash-socialsnap.php';
		require_once BLOGHASH_THEME_PATH . '/inc/compatibility/class-bloghash-wpforms.php';
		require_once BLOGHASH_THEME_PATH . '/inc/compatibility/class-bloghash-jetpack.php';
		require_once BLOGHASH_THEME_PATH . '/inc/compatibility/class-bloghash-beaver-themer.php';
		require_once BLOGHASH_THEME_PATH . '/inc/compatibility/class-bloghash-elementor.php';
		require_once BLOGHASH_THEME_PATH . '/inc/compatibility/class-bloghash-elementor-pro.php';
		require_once BLOGHASH_THEME_PATH . '/inc/compatibility/class-bloghash-hfe.php';

		if ( is_admin() ) {
			require_once BLOGHASH_THEME_PATH . '/inc/utilities/class-bloghash-plugin-utilities.php';
			require_once BLOGHASH_THEME_PATH . '/inc/admin/class-bloghash-admin.php';

		}
		new Bloghash_Enqueue_Scripts();
		// Customizer.
		require_once BLOGHASH_THEME_PATH . '/inc/customizer/class-bloghash-customizer.php';
		require_once BLOGHASH_THEME_PATH . '/inc/customizer/customizer-callbacks.php';
		require_once BLOGHASH_THEME_PATH . '/inc/customizer/class-bloghash-section-ordering.php';
	}
	/**
	 * Setup objects to be used throughout the theme.
	 *
	 * @since  1.0.0
	 * @return void
	 */
	public function objects() {

		bloghash()->options    = new Bloghash_Options();
		bloghash()->fonts      = new Bloghash_Fonts();
		bloghash()->icons      = new Bloghash_Icons();
		bloghash()->customizer = new Bloghash_Customizer();
		if ( is_admin() ) {
			bloghash()->admin = new Bloghash_Admin();
		}
	}
}

/**
 * The function which returns the one Bloghash instance.
 *
 * Use this function like you would a global variable, except without needing
 * to declare the global.
 *
 * Example: <?php $bloghash = bloghash(); ?>
 *
 * @since 1.0.0
 * @return object
 */
function bloghash() {
	return Bloghash::instance();
}
bloghash();

function demnayhair_tailwind_enqueue_scripts() {
    // Dist file generated by "npm run build"
    wp_enqueue_style(
        'demnayhair-tailwind', 
        get_stylesheet_directory_uri() . '/dist/tailwind.css', 
        array(), 
        filemtime(get_stylesheet_directory() . '/dist/tailwind.css')
    );
    wp_enqueue_script(
        'alpinejs', 
        'https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js', 
        array(), 
        null, 
        true
    );
    wp_enqueue_style('fontawesome', 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css');
}
add_action('wp_enqueue_scripts', 'demnayhair_tailwind_enqueue_scripts');


function create_live_rooms_cpt() {
    $labels = array(
        'name' => __('Live Rooms', 'textdomain'),
        'singular_name' => __('Live Room', 'textdomain'),
        'menu_name' => __('Live Rooms'),
        'all_items' => __('All Live Rooms'),
        'add_new' => __('Add New Live Room'),
        'add_new_item' => __('Add New Live Room'),
        'edit_item' => __('Edit Live Room'),
        'new_item' => __('New Live Room'),
        'view_item' => __('View Live Room'),
        'search_items' => __('Search Live Rooms'),
        'not_found' => __('No live rooms found'),
    );

    $args = array(
        'labels' => $labels,
        'public' => true,
        'has_archive' => true,
        'menu_position' => 5,
        'menu_icon' => 'dashicons-video-alt3',
        'supports' => array('title', 'editor', 'thumbnail', 'custom-fields'),
        'rewrite' => array('slug' => 'live-rooms'),
    );

    register_post_type('live_room', $args);
}

add_action('init', 'create_live_rooms_cpt');


function live_room_custom_fields() {
    add_meta_box(
        'live_room_details',
        __('Live Room Details', 'textdomain'),
        'live_room_details_callback',
        'live_room',
        'normal',
        'high'
    );
}

function live_room_details_callback($post) {
    $live_url = get_post_meta($post->ID, '_live_url', true);
    $host_name = get_post_meta($post->ID, '_host_name', true);
    ?>
    <label for="live_url"><?php _e('Live Streaming URL:', 'textdomain'); ?></label>
    <input type="text" name="live_url" id="live_url" value="<?php echo esc_attr($live_url); ?>" style="width: 100%;" />
    <br><br>
    <label for="host_name"><?php _e('Host Name:', 'textdomain'); ?></label>
    <input type="text" name="host_name" id="host_name" value="<?php echo esc_attr($host_name); ?>" style="width: 100%;" />
    <?php
}

function save_live_room_meta($post_id) {
    if (isset($_POST['live_url'])) {
        update_post_meta($post_id, '_live_url', sanitize_text_field($_POST['live_url']));
    }
    if (isset($_POST['host_name'])) {
        update_post_meta($post_id, '_host_name', sanitize_text_field($_POST['host_name']));
    }
}

add_action('add_meta_boxes', 'live_room_custom_fields');
add_action('save_post', 'save_live_room_meta');
